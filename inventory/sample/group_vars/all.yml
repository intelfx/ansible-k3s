---
ansible_user: root
become: false

k3s:
  download:
    state: disabled
    version: "v1.29.0+k3s1"
  install:
    state: present
    packages:
      - k3s

  context_name: "k3s-nexus"

  # k3s_token is required  masters can talk together securely
  # this token should be alpha numeric only
  token: "kBiUgVLbFZ6Nec62xrV2wGYQgel5EYkMSmIDvARubOyTICibxFm6PHI71RiTn0rF"

  # interface which will be used for flannel
  int_iface: "enp1s0"

  # whether to install metallb and kube-vip
  extras: false

  # whether to apply a taint to all server nodes (prevent scheduling of workload pods)
  master_taint: false

  # whether to forcibly run k3s-init.service
  force_reinit: false

  # these arguments are recommended for servers as well as agents:
  # change these to your liking, the only required are: --disable servicelb, --tls-san {{ apiserver_endpoint }}
  extra_args_all: >-

  extra_args_server: >-
    --egress-selector-mode disabled
    --default-local-storage-path /mnt/data/k3s

  extra_args_agent: >-

# These arguments are supposed to be overridable per-node
# (ansible can't merge dictionaries)
k3s_node_force_reinit: false
k3s_node_extra_args: >-
k3s_node_extra_args_init: >-

vip:
  # image tag for kube-vip
  version: "v0.5.12"
  # apiserver_endpoint is virtual ip-address which will be configured on each master
  #apiserver_ip: "10.196.254.2"
  #apiserver_name: "k3s-0.nexus.i.intelfx.name"

metallb:
  # image tags for metal lb
  version:
    speaker: "v0.13.9"
    controller: "v0.13.9"

  # metallb type frr or native
  type: "native"
  # metallb mode layer2 or bgp
  mode: "layer2"

  # bgp options
  # bgp_my_asn: "64513"
  # bgp_peer_asn: "64512"
  # bgp_peer_address: "192.168.30.1"

  # metallb ip range for load balancer
  ip_range: "192.168.30.80-192.168.30.90"

# Only enable if your nodes are proxmox LXC nodes, make sure to configure your proxmox nodes
# in your hosts.ini file.
# Please read https://gist.github.com/triangletodd/02f595cd4c0dc9aac5f7763ca2264185 before using this.
# Most notably, your containers must be privileged, and must not have nesting set to true.
# Please note this script disables most of the security of lxc containers, with the trade off being that lxc
# containers are significantly more resource efficent compared to full VMs.
# Mixing and matching VMs and lxc containers is not supported, ymmv if you want to do this.
# I would only really recommend using this if you have partiularly low powered proxmox nodes where the overhead of
# VMs would use a significant portion of your available resources.
proxmox_lxc:
  configure: false
  # the user that you would use to ssh into the host, for example if you run ssh some-user@my-proxmox-host,
  # set this value to some-user
  user: root
  # the unique proxmox ids for all of the containers in the cluster, both worker and master nodes
  ct_ids:
    - 200
    - 201
    - 202
    - 203
    - 204

# Only enable this if you have set up your own container registry to act as a mirror / pull-through cache
# (harbor / nexus / docker's official registry / etc).
# Can be beneficial for larger dev/test environments (for example if you're getting rate limited by docker hub),
# or air-gapped environments where your nodes don't have internet access after the initial setup
# (which is still needed for downloading the k3s binary and such).
# k3s's documentation about private registries here: https://docs.k3s.io/installation/private-registry
custom_registries:
  configure: false
  state: present
  # The registries can be authenticated or anonymous, depending on your registry server configuration.
  # If they allow anonymous access, simply remove the following bit from custom_registries_yaml
  #   configs:
  #     "registry.domain.com":
  #       auth:
  #         username: yourusername
  #         password: yourpassword
  # The following is an example that pulls all images used in this playbook through your private registries.
  # It also allows you to pull your own images from your private registry, without having to use imagePullSecrets
  # in your deployments.
  # If all you need is your own images and you don't care about caching the docker/quay/ghcr.io images,
  # you can just remove those from the mirrors: section.
  manifest: |
    mirrors:
      docker.io:
        endpoint:
          - "https://registry.domain.com/v2/dockerhub"
      quay.io:
        endpoint:
          - "https://registry.domain.com/v2/quayio"
      ghcr.io:
        endpoint:
          - "https://registry.domain.com/v2/ghcrio"
      registry.domain.com:
        endpoint:
          - "https://registry.domain.com"

    configs:
      "registry.domain.com":
        auth:
          username: yourusername
          password: yourpassword

proxy:
  configure: false
  # Only enable and configure these if you access the internet through a proxy
  env:
    HTTP_PROXY: "http://proxy.domain.local:3128"
    HTTPS_PROXY: "http://proxy.domain.local:3128"
    NO_PROXY: "*.domain.local,127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
