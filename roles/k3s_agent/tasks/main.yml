---
- name: Install k3s configuration
  vars:
    _k3s_units_env:
      "k3s-agent.service":
        "K3S_EXEC": '{{ _k3s_args_agent | split() | join(" ") }}'
    _k3s_configs_dir: /etc/rancher/k3s/config.yaml.d
    _k3s_configs: '{{ _k3s_configs_all | combine(_k3s_configs_agent | default({})) }}'
  block:
    - name: Create configuration directory
      file:
        path: '{{ _k3s_configs_dir }}'
        state: directory

    - name: Install configuration files
      copy:
        content: '{{ item.value }}'
        dest: "{{ _k3s_configs_dir }}/{{ item.key }}"
        mode: "0600"
      when: item.value is match("\S")
      loop: '{{ _k3s_configs | dict2items }}'
      loop_control:
        label: '{{ item.key }}'
      notify: k3s_restart

    - debug:
        msg: '{{ _k3s_configs }}'

    - name: Install environment files
      copy:
        content: |-
          # Mandatory configuration
          {% for k, v in _k3s_units_env[item].items() %}
          {{ k }}={{ v }}
          {% endfor %}

          {% if proxy.configure %}
          # Proxy configuration
          {% for k, v in proxy.env.items() %}
          {{ k }}={{ v }}
          {% endfor %}
          {% endif %}
        dest: "{{ _systemd_dir }}/{{ item }}.env"
        mode: '0600'
      loop: '{{ _k3s_units_env.keys() }}'

    - debug:
        msg: '{{ _k3s_units_env }}'

- name: Commit reinit flag
  meta: flush_handlers

- name: Enable and run k3s-agent.service
  systemd:
    name: k3s-agent.service
    enabled: true
    state: '{{ "restarted" if _k3s_restart or _k3s_force_restart else "started" }}'

# TODO: wait for k3s agent nodes, somehow (probably using delegation to one of the masters)

- name: Find k3s tool
  command:
    argv: [
      "which",
      "k3s",
    ]
  changed_when: false
  register: this

- name: Create {{ item }} symlink
  file:
    src: '{{ this.stdout }}'
    dest: "/usr/local/bin/{{ item }}"
    state: link
  loop:
    - crictl
    - ctr
