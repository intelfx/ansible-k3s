---
- name: Install k3s configuration
  vars:
    _k3s_units_env:
      "k3s-init.service":
        "K3S_EXEC": '{{ _k3s_args_server_init | split() | join(" ") }}'
      "k3s.service":
        "K3S_EXEC": '{{ _k3s_args_server | split() | join(" ") }}'
  block:
    - name: Install environment files
      copy:
        content: |-
          # Mandatory configuration
          {% for k, v in _k3s_units_env[item].items() %}
          {{ k }}={{ v }}
          {% endfor %}

          {% if proxy.configure %}
          # Proxy configuration
          {% for k, v in proxy.env.items() %}
          {{ k }}={{ v }}
          {% endfor %}
          {% endif %}
        dest: "{{ _systemd_dir }}/{{ item }}.env"
        mode: '0600'
      loop: '{{ _k3s_units_env.keys() }}'
      notify: k3s_reinit

- name: Install k3s manifests
  when: inventory_hostname == groups["k3s_server"][0]
  vars:
    _k3s_manifests_dir: /var/lib/rancher/k3s/server/manifests
  block:
    - name: Create manifests directory
      file:
        path: '{{ _k3s_manifests_dir }}'
        state: directory
      when: k3s.extras

    - name: Install kube-vip manifests
      include_tasks: install_kube_vip.yml
      when: k3s.extras

    - name: Install MetalLB manifests
      include_tasks: install_metallb.yml
      when: k3s.extras

- name: Commit reinit flag
  meta: flush_handlers

- name: Check node-token
  stat:
    path: "{{ _k3s_state_dir }}/server/node-token"
  register: _k3s_node_token

- name: Check agent-token
  stat:
    path: "{{ _k3s_state_dir }}/server/agent-token"
  register: _k3s_agent_token

- name: Initialize k3s
  when: not (_k3s_node_token.stat.exists and _k3s_agent_token.stat.exists) or _k3s_reinit
  block:
    - name: Stop and reset k3s units
      systemd_service:
        name: '{{ item }}'
        state: stopped
        reset_failed: true
      failed_when: false
      loop:
        - k3s-init.service
        - k3s.service

    - name: Get journal cursor
      command:
        argv: [
          "journalctl",
          "-n1",
          "-ojson",
          "--output-fields=__CURSOR",
        ]
      changed_when: false
      register: _k3s_init_cursor

    - name: Run k3s-init.service
      command:
        argv: [
          "systemd-run",
          "--unit=k3s-init.service",
          "-pType=notify",
          "-pEnvironmentFile={{ _systemd_dir }}/k3s-init.service.env",
          "-pKillMode=mixed",
          "-pDelegate=yes",
          "-pRestartSec=2",
          "-pRestart=on-failure",
          "--",
          "k3s",
          "server",
          "$K3S_EXEC",
        ]
        creates: "{{ _systemd_transient_dir }}/k3s-init.service"
      register: this
    - debug:
        msg: '{{ this.stdout + this.stderr }}'

    - name: Wait for k3s initialization
      when: not ansible_check_mode
      include_tasks: k3s_wait_up.yml

  always:
    - name: Fetch final node status
      command:
        argv: [
          "k3s",
          "kubectl",
          "get",
          "nodes",
          "-l=node-role.kubernetes.io/master=true",
          "-o=wide",
        ]
      changed_when: false
      failed_when: false
      register: this

    - name: Store node status
      delegate_to: localhost
      become: false
      copy:
        content: '{{ this.stdout }}'
        dest: "{{ _k3s_log_destination }}/k3s-init-nodes@{{ inventory_hostname }}.log"

    - name: Terminate k3s-init.service
      systemd:
        name: k3s-init.service
        state: stopped
        reset_failed: true

    - name: Fetch k3s-init.service logs
      command:
        argv: [
          "journalctl",
          "--all",
          "--unit=k3s-init.service",
          '--after-cursor={{ (_k3s_init_cursor.stdout | from_json)["__CURSOR"] }}',
        ]
      changed_when: false
      register: this

    - name: Store k3s-init.service logs
      delegate_to: localhost
      become: false
      copy:
        content: '{{ this.stdout }}'
        dest: "{{ _k3s_log_destination }}/k3s-init-log@{{ inventory_hostname }}.log"

- name: Enable and run k3s.service
  systemd:
    name: k3s.service
    daemon_reload: true
    enabled: true
    state: restarted

- name: Wait for k3s
  when: not ansible_check_mode
  include_tasks: k3s_wait_up.yml

- name: Read k3s configuration
  when: not ansible_check_mode
  # and inventory_hostname == groups["k3s_server"][0]
  block:
    # ffs, ansible, give us blocks in loops
    - name: Read tokens
      slurp:
        path: "{{ _k3s_state_dir }}/server/{{ item.src }}"
      loop:
        - { src: node-token, fact: _k3s_node_token }
        - { src: agent-token, fact: _k3s_agent_token }
      register: tokens

    - name: Store tokens
      set_fact:
        '{{ item.item.fact }}': '{{ item.content | b64decode | trim }}'
        cacheable: true
      loop: '{{ tokens.results }}'
      loop_control:
        label: '{{ item.item }}'

    - debug:
        msg: '{{ _k3s_node_token }}'
    - debug:
        msg: '{{ _k3s_agent_token }}'
    - debug:
        msg: '{{ _k3s_init_token }}'

    - name: Adjust kubeconfig context and cluster name to {{ cluster_name }}
      vars:
        cluster_name: '{{ inventory_hostname | regex_replace("[^a-zA-Z0-9-]", "-") }}'
      replace:
        path: "{{ _k3s_conf_dir }}/k3s.yaml"
        regexp: "\\b(current-context|cluster|user|name): default$"
        replace: "\\1: {{ cluster_name }}"

    - name: Adjust kubeconfig endpoint URL to {{ endpoint_url }}
      vars:
        endpoint_url: "https://{{ _k3s_apiserver_name | ansible.utils.ipwrap }}:6443"
      replace:
        path: "{{ _k3s_conf_dir }}/k3s.yaml"
        regexp: "\\b(server): [^\\n]+$"
        replace: "\\1: {{ endpoint_url }}"

    - name: Create ~/.kube
      file:
        path: "{{ ansible_facts.user_dir }}/.kube"
        state: directory
        owner: "{{ ansible_facts.user_id }}"
        mode: "0750"

    - name: Copy kubeconfig to ~/.kube
      copy:
        remote_src: true
        src: "{{ _k3s_conf_dir }}/k3s.yaml"
        dest: "{{ ansible_facts.user_dir }}/.kube/config"
        owner: "{{ ansible_facts.user_id }}"
        mode: "0640"

- name: Download k3s configuration
  when: not ansible_check_mode and inventory_hostname == groups["k3s_server"][0]
  block:
    - name: Fetch k3s configuration
      vars:
        src: '{{ item.src }}'
        dest: '{{ _k3s_conf_destination }}/{{ item.dest | default(item.src | basename) }}@{{ inventory_hostname }}'
      fetch:
        src: "{{ src }}"
        dest: "{{ dest }}"
        flat: true
      loop:
        - { src: "{{ _k3s_state_dir }}/server/node-token" }
        - { src: "{{ _k3s_state_dir }}/server/agent-token" }
        - { src: "{{ _k3s_conf_dir }}/k3s.yaml", dest: kubeconfig }

- name: Find k3s tool
  command:
    argv: [
      "which",
      "k3s",
    ]
  changed_when: false
  register: this

- name: Create {{ item }} symlink
  file:
    src: '{{ this.stdout }}'
    dest: "/usr/local/bin/{{ item }}"
    state: link
  loop:
    - crictl
    - kubectl
